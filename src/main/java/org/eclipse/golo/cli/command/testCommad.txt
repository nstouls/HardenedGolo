package org.eclipse.golo.cli.command;

import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;

import org.eclipse.golo.cli.command.DiagnoseCommand.DiagnoseModeValidator;
import org.eclipse.golo.cli.command.spi.CliCommand;
import org.eclipse.golo.compiler.CodeGenerationResult;
import org.eclipse.golo.compiler.GoloClassLoader;
import org.eclipse.golo.compiler.GoloCompilationException;


import org.eclipse.golo.compiler.GoloCompiler;
import org.eclipse.golo.compiler.JavaBytecodeGenerationGoloIrVisitor;
import org.eclipse.golo.compiler.ir.GoloFunction;
import org.eclipse.golo.compiler.ir.GoloModule;
import org.eclipse.golo.compiler.ir.ModuleImport;
import org.eclipse.golo.compiler.parser.ASTCompilationUnit;
import org.eclipse.golo.compiler.parser.GoloParser;
import org.eclipse.golo.compiler.parser.JJTGoloParserState;
import org.eclipse.golo.compiler.parser.SimpleNode;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.lang.ClassLoader;
import java.io.InputStream;



@Parameters(commandNames = {"tests"}, commandDescription = "Run all the test with @Test decorator")
public class TestCommand implements CliCommand {
	
	@Parameter(description = "Golo source files (*.golo and directories)")
	List<String> files = new LinkedList<>();
	
	@Parameter(names = {"--run"}, description = "run tests")
	boolean run = false;

	@Override
	public void execute() throws Throwable {
		
		try {
			GoloCompiler compiler = new GoloCompiler();
			File result = null;
			for(String file : this.files)
				result = extractTests(file, compiler);
			if(run)
				run(result, compiler);
		} catch (GoloCompilationException e) {
			handleCompilationException(e);
		}
		
	}
	
	private File extractTests(String goloFile, GoloCompiler compiler) {
		GoloModule module;
		String pathFile = goloFile.substring(0, goloFile.lastIndexOf("\\")+1);
		File testFunctions = new File(pathFile + "TestFunctions.golo");
		
		try {
			module = compiler.transform(compiler.parse(goloFile));
	        Set<GoloFunction> functions = module.getFunctions();
	        
	        
	        /*
	        testFunctions.createNewFile();
	        PrintWriter write = new PrintWriter(testFunctions);
	        
	        write.println("module TestFunctions");
	        write.println("import " + module.getPackageAndClass().className());
	        for(ModuleImport imp : module.getImports())
	        	write.println("import " + imp.getPackageAndClass());
	        write.println();
	            
	        write.println("function main = |args| {");
	        getTestFunction(functions, write);
	        write.println("}");
	        write.close();
	        */
	        InputStream in = null;
	        int i = 0;
	        ASTCompilationUnit astTest = new ASTCompilationUnit(new GoloParser(in), 0);
	        SimpleNode n = new SimpleNode(i);
	        GoloModule moduleTest = new GoloModule(null);
	        astTest.jjtAddChild(n, i);	     
	        astTest.childrenAccept(visitor, data)
	        
	        
	     
		} catch (IOException e) {
			System.out.println("[error] " + goloFile + " does not exist or could not be opened.");
		}
		return testFunctions;
		
	}

	private void run(File result, GoloCompiler compiler) { // it runs the ast tree after parsing it
		ASTCompilationUnit ast = null;
		try {
			ast = compiler.parse(result.getName());
			GoloModule goloModuleChild = compiler.check(ast);
		    JavaBytecodeGenerationGoloIrVisitor bytecodeGenerator = new JavaBytecodeGenerationGoloIrVisitor();
		    bytecodeGenerator.generateBytecode(goloModuleChild, result.getName());
		    
		} catch (IOException e) {
	        System.out.println("[error] " + result.getName() + " does not exist or could not be opened.");
	    }
        ast.dump("% ");
		
	}

	private void getTestFunction(Set<GoloFunction> functions, PrintWriter write) {
		for(GoloFunction f : functions){
			if(f.hasDecorators()){
				List<org.eclipse.golo.compiler.ir.Decorator> dec = f.getDecorators();
				for(org.eclipse.golo.compiler.ir.Decorator d : dec)
					if(d.getExpressionStatement().toString().equals("Ref{name=Test}"))
						write.println("	" + f.getName() + "()");
			}
		}
	}
	
	private Set<GoloFunction> getTest(Set<GoloFunction> functions) {
		Set<GoloFunction> test = new Set<GoloFunction>();
		for(GoloFunction f : functions){
			if(f.hasDecorators()){
				List<org.eclipse.golo.compiler.ir.Decorator> dec = f.getDecorators();
				for(org.eclipse.golo.compiler.ir.Decorator d : dec)
					if(d.getExpressionStatement().toString().equals("Ref{name=Test}"))
						write.println("	" + f.getName() + "()");
			}
		}
	}
	

}













package org.eclipse.golo.cli.command;

import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;

import org.eclipse.golo.cli.command.DiagnoseCommand.DiagnoseModeValidator;
import org.eclipse.golo.cli.command.spi.CliCommand;
import org.eclipse.golo.compiler.CodeGenerationResult;
import org.eclipse.golo.compiler.GoloClassLoader;
import org.eclipse.golo.compiler.GoloCompilationException;


import org.eclipse.golo.compiler.GoloCompiler;
import org.eclipse.golo.compiler.JavaBytecodeGenerationGoloIrVisitor;
import org.eclipse.golo.compiler.ir.GoloFunction;
import org.eclipse.golo.compiler.ir.GoloModule;
import org.eclipse.golo.compiler.ir.ModuleImport;
import org.eclipse.golo.compiler.parser.ASTCompilationUnit;
import org.eclipse.golo.compiler.parser.ASTFunction;
import org.eclipse.golo.compiler.parser.GoloASTNode;
import org.eclipse.golo.compiler.parser.GoloParser;
import org.eclipse.golo.compiler.parser.GoloParserDefaultVisitor;
import org.eclipse.golo.compiler.parser.GoloParserVisitor;
import org.eclipse.golo.compiler.parser.JJTGoloParserState;
import org.eclipse.golo.compiler.parser.SimpleNode;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.lang.ClassLoader;
import java.io.InputStream;



@Parameters(commandNames = {"tests"}, commandDescription = "Run all the test with @Test decorator")
public class TestCommand implements CliCommand {
	
	@Parameter(description = "Golo source files (*.golo and directories)")
	List<String> files = new LinkedList<>();
	
	@Parameter(names = {"--run"}, description = "run tests")
	boolean run = false;

	@Override
	public void execute() throws Throwable {
		
		try {
			GoloCompiler compiler = new GoloCompiler();
			File result = null;
			for(String file : this.files)
				extractTests(file, compiler);
			if(run)
				run(result, compiler);
		} catch (GoloCompilationException e) {
			handleCompilationException(e);
		}
		
	}
	
	private void extractTests(String goloFile, GoloCompiler compiler) {
		GoloModule module;
		
		try {
			
			ASTCompilationUnit ast = compiler.parse(goloFile);
			module = compiler.transform(ast);
			Set<GoloFunction> tests = getTestFunctions(module.getFunctions());
	       
	   
	        /*
	        write.println("import " + module.getPackageAndClass().className());
	        for(ModuleImport imp : module.getImports())
	        	write.println("import " + imp.getPackageAndClass());
	        */
	       
	        
	        int i = 32;
	        FileInputStream in = new FileInputStream(goloFile);
	        ASTCompilationUnit astTest = new ASTCompilationUnit(new GoloParser(in), i);
	       
	        GoloModule moduleTest = new GoloModule(module.getPackageAndClass());
	      
	        
	    
	        
	        GoloParserVisitor visitor = new GoloParserDefaultVisitor();
	        int j = 0;
	        for(GoloFunction fun : tests){
	        	ASTFunction astfun = new ASTFunction(i);
	        	astfun.childrenAccept(visitor, fun);
	        	
	        	astTest.jjtAddChild(astfun, j);
	        	j++;
	        }
	        System.out.println(astTest.toString());
	        astTest.dump("%");
	        
  
	     
		} catch (IOException e) {
			System.out.println("[error] " + goloFile + " does not exist or could not be opened.");
		}
		
		
	}

	private void run(File result, GoloCompiler compiler) { // it runs the ast tree after parsing it
		ASTCompilationUnit ast = null;
		try {
			ast = compiler.parse(result.getName());
			/*GoloModule goloModuleChild = compiler.check(ast);
		    JavaBytecodeGenerationGoloIrVisitor bytecodeGenerator = new JavaBytecodeGenerationGoloIrVisitor();
		    bytecodeGenerator.generateBytecode(goloModuleChild, result.getName());*/
			
		    
		} catch (IOException e) {
	        System.out.println("[error] " + result.getName() + " does not exist or could not be opened.");
	    }
        ast.dump("% ");
		
	}

	private Set<GoloFunction> getTestFunctions(Set<GoloFunction> functions) {
		Set<GoloFunction> test = new HashSet<GoloFunction>();
		for(GoloFunction f : functions){
			if(f.hasDecorators()){
				List<org.eclipse.golo.compiler.ir.Decorator> dec = f.getDecorators();
				for(org.eclipse.golo.compiler.ir.Decorator d : dec)
					if(d.getExpressionStatement().toString().equals("Ref{name=Test}"))
						test.add(f);
						
			}
		}
		return test;
	}
	

}